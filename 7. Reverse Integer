Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321

Example 2:
Input: -123
Output: -321

Example 3:
Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
=====================================================================================
Solution: We need to take care the integer overflow. Here we compare before *10 and after *10 value.
Date: 2019/03/20
Language: C

int reverse(int x) {
    
    if(!x || x > pow(2, 31) - 1 || x < -1 * pow(2, 31))
        return 0;
    
    bool IsNeg = false;
    
    int PosNum = 0;
    int digit = 0;
    int sum = 0;
    
    PosNum = x;
    
    if(x < 0)
    {
        IsNeg = true;
        PosNum = -x;
    }
    
    while(PosNum)
    {
        PosNum /= 10;
        digit++;
    }
    
    for(int i = 0; i < digit; i++)
    {
        int test = sum;
        sum *= 10;
        
        if((sum / 10) != test)
            return 0;
        
        sum += x % 10;
        x /= 10;
    }
        
    
    return sum;
}
