Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
==============================================================================
Solution: Get the largest profit from (the later elements (>1) - previous elements)
Date: 2019/03/20
Language: C

int maxProfit(int* prices, int pricesSize) {
    /*
    if(pricesSize == 0 || pricesSize == 1)
        return 0;
    
    int max = INT_MIN;
    
    for(int i = pricesSize - 1; i >= 1; i--)
    {
       for(int j = 0; j <= i - 1; j++)
       {
          if((prices[i] - prices[j]) > max && prices[i] - prices[j] >= 0)
              max = prices[i] - prices[j];
          else if(max <= prices[i] - prices[j] && prices[i] - prices[j] <= 0)
          {
              max = 0;
          }
       }
    }
    
    return max;
    */
    
    //if there is only one element, and then return 0.
    if(pricesSize <= 0)
        return 0;
    
    int profit = 0; //the max profit
    int min = prices[0]; // the minimum price
    
    for(int i = 1; i < pricesSize; i++)
    {
        if(prices[i] < min)
            min = prices[i];
     
        if(prices[i] - min > profit)
            profit = prices[i] - min;
    }
    
    return profit;
    
}
